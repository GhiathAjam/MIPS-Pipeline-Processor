ASSUMPTIONS:
  1- CYCLE LENGTH == 100 ps
  2- NO HANDLING OF EXCEPTIONS DUE TO WRONG ADDRESSES OF EXCEPTION HANDLERS OR IVT OR RESET ADDRESS
  3- NO HANDLING OF NESETD INTERRUPTS

- INT idx
 1- idx is passed as immediate???!!! No, as Rd
 2- alu passes imm as alu res
 3- EDU knows it is interrupt from mem-address mux
 4- EDU enters a procedure of multiple cycles:
  4.0- EDU signals storing next PC to the stack
  4.1- EDU passes 6 to mem address to get address of IVT
  4.2- EDU passes IVT address again to memory after adding alu res to it
  4.3- mem res is sent to pc

- all readings except buffers and registers are combinational
- PC  register updates on falling edge (or later if needed)
- buffers update on falling edge (or later if needed)
- alu is combinational
- stack pointer is updated AFTER operation


- MEMORY notes:
 - writing to memory, stack or port is done with falling edge

- BUFFERS notes:
  - writing is done with falling edge

Exceptions:
  1- pop when empty stack
  2- alu res > 0xFF00


Exceptions:
  1- excpetions handlrs addresss are stored in DATA MEMORY M[2], M[3], M[4], M[5]
  2- ACTUAL handlers are stored in INSTRUCTION MEMORY in IM[ M[2]&M[3] ], IM[ M[4]&M[5] ]

Interrupts:
  1- IVT address is stoed in DATA memory in M[6]&M[7]
  2- Interrupt handlers addresses are stored in DATA memory in M[ M[6]&M[7] +idx ]
  3- Actual interrupt handlers are stored in INSTRUCTION memory in IM[ M[ M[6]&M[7] +idx ] ]
